{"version":3,"sources":["../src/actions/escrow.ts","../src/environment.ts","../src/utils/index.ts","../src/utils/constants.ts","../src/actions/deployment.ts","../src/utils/template.ts","../src/providers/tokens.ts","../src/providers/deployment.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    elizaLogger,\n    composeContext,\n    ModelClass,\n    generateObjectDeprecated,\n} from \"@elizaos/core\";\nimport { validateSpheronConfig } from \"../environment.ts\";\nimport {\n    depositBalance,\n    getUserBalance,\n    withdrawBalance,\n} from \"../utils/index.ts\";\nimport type { EscrowContent } from \"../types/index.ts\";\nimport { SUPPORTED_TOKENS } from \"../utils/constants.ts\";\n\n// function isEscrowContent(content: any): content is EscrowContent {\n//     console.log(\"Content for escrow operation:\", content);\n//     return (\n//         typeof content.token === \"string\" &&\n//         (content.operation === \"deposit\" || content.operation === \"withdraw\"\n//             ? typeof content.amount === \"number\" && content.amount > 0\n//             : content.operation === \"check\") &&\n//         (content.operation === \"deposit\" ||\n//             content.operation === \"withdraw\" ||\n//             content.operation === \"check\")\n//     );\n// }\n\nfunction isEscrowContent(content: unknown): content is EscrowContent {\n    console.log(\"Content for escrow operation:\", content);\n\n    // First, check if content is an object\n    if (typeof content !== 'object' || content === null) {\n        return false;\n    }\n\n    // Type assertion to access properties safely\n    const contentObj = content as Record<string, unknown>;\n\n    return (\n        typeof contentObj.token === \"string\" &&\n        (contentObj.operation === \"deposit\" || contentObj.operation === \"withdraw\"\n            ? typeof contentObj.amount === \"number\" && contentObj.amount > 0\n            : contentObj.operation === \"check\") &&\n        (contentObj.operation === \"deposit\" ||\n            contentObj.operation === \"withdraw\" ||\n            contentObj.operation === \"check\")\n    );\n}\n\nconst escrowTemplate = `Respond with a JSON markdown block containing only the extracted values\n- Use null for any values that cannot be determined.\n- Token must be one of the supported tokens.\n- Amount must be a positive number.\n\nExample response for checking balance for <token-symbol>:\n\\`\\`\\`json\n{\n    \"token\": \"<token-symbol>\", // can be USDT, USDC, DAI, WETH, CST\n    \"operation\": \"check\"\n}\n\\`\\`\\`\n\nExample response for depositing <amount> <token-symbol>:\n\\`\\`\\`json\n{\n    \"token\": \"<token-symbol>\", // can be USDT, USDC, DAI, WETH, CST\n    \"amount\": <amount>, // must be a positive number\n    \"operation\": \"deposit\"\n}\n\\`\\`\\`\n\nExample response for withdrawing <amount> <token-symbol>:\n\\`\\`\\`json\n{\n    \"token\": \"<token-symbol>\", // can be USDT, USDC, DAI, WETH, CST\n    \"amount\": <amount>, // must be a positive number\n    \"operation\": \"withdraw\" // must be one of the supported operations\n}\n\\`\\`\\`\n\n## Supported Tokens\n${Object.entries(SUPPORTED_TOKENS)\n    .map(([key, _]) => `- ${key}`)\n    .join(\"\\n\")}\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested escrow operation:\n- Token symbol (must be one of the supported tokens)\n- Amount to deposit/withdraw (must be a positive number)\n- Operation type (deposit or withdraw)\n- Don't mention multiple operations in the same json block\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"ESCROW_OPERATION\",\n    similes: [\n        \"DEPOSIT_TOKEN\",\n        \"WITHDRAW_TOKEN\",\n        \"CHECK_BALANCE\",\n        \"GET_BALANCE\",\n        \"DEPOSIT_FUNDS\",\n        \"WITHDRAW_FUNDS\",\n        \"ADD_FUNDS\",\n        \"REMOVE_FUNDS\",\n        \"TRANSFER_TO_ESCROW\",\n        \"TRANSFER_FROM_ESCROW\",\n        \"FUND_ACCOUNT\",\n        \"WITHDRAW_FROM_ACCOUNT\",\n    ],\n    description:\n        \"MUST use this action if the user requests to deposit or withdraw tokens from escrow. The request might vary, but it will always be related to escrow operations.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateSpheronConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting ESCROW_OPERATION handler...\");\n\n        // Create local variable for state manipulation\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Filter only \"just now\" and last couple of user messages\n        state.recentMessages = state.recentMessages\n            .split(\"\\n\")\n            .filter(\n                (line) => line.includes(\"(just now)\") || line.includes(\"(user)\")\n            )\n            .slice(-2)\n            .join(\"\\n\");\n\n        // Compose escrow context\n        const escrowContext = composeContext({\n            state: currentState,\n            template: escrowTemplate,\n        });\n\n        // Generate escrow content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: escrowContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Validate escrow content\n        if (!isEscrowContent(content)) {\n            elizaLogger.error(\"Invalid content for ESCROW_OPERATION action.\");\n            callback?.({\n                text: \"Unable to process escrow request. Invalid content provided.\",\n                content: { error: \"Invalid escrow content\" },\n            });\n            return false;\n        }\n\n        try {\n            const config = await validateSpheronConfig(runtime);\n            const balance = await getUserBalance(\n                runtime,\n                content.token,\n                config.WALLET_ADDRESS\n            );\n            elizaLogger.log(`Current ${content.token} balance:`, balance);\n\n            if (content.operation === \"check\") {\n                const formattedAvailableBalance =\n                    Number(balance.unlockedBalance) /\n                    10 ** Number(balance.token.decimal);\n                const formattedLockedBalance =\n                    Number(balance.lockedBalance) /\n                    10 ** Number(balance.token.decimal);\n                callback?.({\n                    text: `Current ${content.token.toUpperCase()} Balance for ${config.WALLET_ADDRESS}\\n Available balance: ${formattedAvailableBalance.toFixed(2)} ${content.token.toUpperCase()}\\n Locked balance: ${formattedLockedBalance.toFixed(2)} ${content.token.toUpperCase()}`,\n                    content: {\n                        success: true,\n                        unlockedBalance: formattedAvailableBalance,\n                        lockedBalance: formattedLockedBalance,\n                        token: balance.token,\n                        walletAddress: config.WALLET_ADDRESS,\n                    },\n                });\n            } else if (content.operation === \"deposit\") {\n                try {\n                    const result = await depositBalance(\n                        runtime,\n                        content.token,\n                        content.amount\n                    );\n                    callback?.({\n                        text: `Successfully deposited ${content.amount} ${content.token.toUpperCase()} into Spheron Escrow for ${config.WALLET_ADDRESS}`,\n                        content: {\n                            success: true,\n                            transaction: result,\n                            operation: \"deposit\",\n                            token: content.token,\n                            amount: content.amount,\n                            newBalance: await getUserBalance(\n                                runtime,\n                                content.token,\n                                config.WALLET_ADDRESS\n                            ),\n                            walletAddress: config.WALLET_ADDRESS,\n                        },\n                    });\n                } catch (error) {\n                    elizaLogger.error(\"Deposit operation failed:\", error);\n                    callback?.({\n                        text: `Failed to deposit ${content.amount} ${content.token.toUpperCase()}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                        content: {\n                            success: false,\n                            operation: \"deposit\",\n                            token: content.token,\n                            amount: content.amount,\n                            error:\n                                error instanceof Error\n                                    ? error.message\n                                    : \"Unknown error\",\n                        },\n                    });\n                    return false;\n                }\n            } else if (content.operation === \"withdraw\") {\n                try {\n                    const result = await withdrawBalance(\n                        runtime,\n                        content.token,\n                        content.amount\n                    );\n                    callback?.({\n                        text: `Successfully withdrew ${content.amount} ${content.token.toUpperCase()} from Spheron Escrow for ${config.WALLET_ADDRESS}`,\n                        content: {\n                            success: true,\n                            transaction: result,\n                            operation: \"withdraw\",\n                            token: content.token,\n                            amount: content.amount,\n                            newBalance: await getUserBalance(\n                                runtime,\n                                content.token,\n                                config.WALLET_ADDRESS\n                            ),\n                            walletAddress: config.WALLET_ADDRESS,\n                        },\n                    });\n                } catch (error) {\n                    elizaLogger.error(\"Withdraw operation failed:\", error);\n                    callback?.({\n                        text: `Failed to withdraw ${content.amount} ${content.token.toUpperCase()}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                        content: {\n                            success: false,\n                            operation: \"withdraw\",\n                            token: content.token,\n                            amount: content.amount,\n                            error:\n                                error instanceof Error\n                                    ? error.message\n                                    : \"Unknown error\",\n                        },\n                    });\n                    return false;\n                }\n            } else {\n                throw new Error(\"Invalid operation\");\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Escrow operation failed:\", error);\n            callback?.({\n                text: \"Escrow operation failed\",\n                content: {\n                    error:\n                        error instanceof Error\n                            ? error.message\n                            : \"Unknown error\",\n                },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 100 USDT into escrow\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Processing your deposit of 100 USDT...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 50 USDC from my balance\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Processing your withdrawal of 50 USDC...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Add 200 DAI to my account\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Processing your deposit of 200 DAI...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check agent's escrow USDT balance\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Checking your USDT balance...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"How much DAI do I have in agent's escrow?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Let me check your DAI balance...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 75 USDC to escrow\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Processing your deposit of 75 USDC...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to remove 150 DAI from escrow\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Processing your withdrawal of 150 DAI...\",\n                    action: \"ESCROW_OPERATION\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const spheronEnvSchema = z.object({\n    PRIVATE_KEY: z.string().min(1, \"Private key is required\"),\n    PROVIDER_PROXY_URL: z\n        .string()\n        .url(\"Provider proxy URL must be a valid URL\"),\n    WALLET_ADDRESS: z.string().min(1, \"Wallet address is required\"),\n    SPHERON_PROXY_PORT: z.string().optional(),\n});\n\nexport const requiredEnvVars = [\n    \"SPHERON_PRIVATE_KEY\",\n    \"SPHERON_WALLET_ADDRESS\",\n    \"SPHERON_PROVIDER_PROXY_URL\",\n] as const;\n\nexport type SpheronConfig = z.infer<typeof spheronEnvSchema>;\n\nexport async function validateSpheronConfig(\n    runtime: IAgentRuntime\n): Promise<SpheronConfig> {\n    try {\n        const config = {\n            PRIVATE_KEY:\n                runtime.getSetting(\"PRIVATE_KEY\") ||\n                process.env.SPHERON_PRIVATE_KEY ||\n                process.env.PRIVATE_KEY,\n            PROVIDER_PROXY_URL:\n                runtime.getSetting(\"PROVIDER_PROXY_URL\") ||\n                process.env.SPHERON_PROVIDER_PROXY_URL ||\n                process.env.PROVIDER_PROXY_URL,\n            WALLET_ADDRESS:\n                runtime.getSetting(\"WALLET_ADDRESS\") ||\n                process.env.SPHERON_WALLET_ADDRESS ||\n                process.env.WALLET_ADDRESS,\n        };\n\n        return spheronEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Spheron configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import { type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\nimport { SpheronSDK } from \"@spheron/protocol-sdk\";\nimport { validateSpheronConfig } from \"../environment.ts\";\nimport type {\n    BalanceInfo,\n    DeploymentDetails,\n    SpheronComputeConfig,\n} from \"../types/index.ts\";\n\nexport const getSDKInstance = async (\n    runtime: IAgentRuntime\n): Promise<SpheronSDK> => {\n    const config = await validateSpheronConfig(runtime);\n    return new SpheronSDK(\"testnet\", config.PRIVATE_KEY);\n};\n\n// Escrow Operations\nexport const getUserBalance = async (\n    runtime: IAgentRuntime,\n    token: string,\n    walletAddress?: string\n): Promise<BalanceInfo> => {\n    const sdk = await getSDKInstance(runtime);\n    return await sdk.escrow.getUserBalance(token, walletAddress);\n};\n\nexport const depositBalance = async (\n    runtime: IAgentRuntime,\n    token: string,\n    amount: number\n): Promise<unknown> => { // Replace any with unknown\n    const sdk = await getSDKInstance(runtime);\n    return await sdk.escrow.depositBalance({\n        token,\n        amount,\n        onFailureCallback: (error) => {\n            elizaLogger.error(\"Deposit failed: \", error);\n            throw error;\n        },\n    });\n};\n\nexport const withdrawBalance = async (\n    runtime: IAgentRuntime,\n    token: string,\n    amount: number\n): Promise<unknown> => { // Replace any with unknown\n    const sdk = await getSDKInstance(runtime);\n    return await sdk.escrow.withdrawBalance({\n        token,\n        amount,\n        onFailureCallback: (error) => {\n            elizaLogger.error(\"Withdrawal failed:\", error);\n            throw error;\n        },\n    });\n};\n\n// Deployment Operations\nexport const startDeployment = async (\n    runtime: IAgentRuntime,\n    computeConfig: SpheronComputeConfig\n): Promise<any> => {\n    // Check balance before deployment\n    const token = computeConfig.token || \"CST\";\n    const balance = await getUserBalance(runtime, token);\n\n    // Ensure unlockedBalance and decimals exist and are valid\n    if (!balance.unlockedBalance || !balance.token?.decimal) {\n        throw new Error(\"Invalid balance info structure\");\n    }\n\n    const unlockedBalance = BigInt(balance.unlockedBalance);\n    const decimal = BigInt(balance.token.decimal);\n    const divisor = BigInt(10) ** decimal;\n\n    // Calculate withdrawal amount and convert to string with proper decimal places\n    const balanceAmount = Number(unlockedBalance) / Number(divisor);\n\n    const requiredAmount =\n        calculateGPUPrice(computeConfig.computeResources?.gpu) *\n        (computeConfig.duration ? parseDuration(computeConfig.duration) : 1);\n\n    if (balanceAmount < requiredAmount) {\n        throw new Error(\n            `Insufficient balance. Available: ${balanceAmount} ${token}, Required: ${requiredAmount} ${token}`\n        );\n    }\n\n    const result = await createOrder(runtime, generateICLYaml(computeConfig));\n    // Wait for new deployment to be ready\n    let isReady = false;\n    const maxAttempts = 10; // 10 times with 10-second intervals\n    let attempts = 0;\n\n    while (!isReady && attempts < maxAttempts) {\n        const status = await getDeploymentStatus(\n            runtime,\n            result.leaseId.toString()\n        );\n        elizaLogger.debug(\n            `Deployment status (attempt ${attempts + 1}/${maxAttempts}):`,\n            status\n        );\n\n        if (status) {\n            isReady = true;\n        } else {\n            await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds between checks\n            attempts++;\n        }\n    }\n\n    if (isReady) {\n        elizaLogger.log(\"Deployment ready\");\n    } else {\n        elizaLogger.error(`Deployment not ready after ${maxAttempts} attempts`);\n        throw new Error(\"Deployment timeout\");\n    }\n    return result;\n};\n\nexport const updateDeployment = async (\n    runtime: IAgentRuntime,\n    leaseId: string,\n    computeConfig: SpheronComputeConfig\n): Promise<any> => {\n    // Check balance before deployment update\n    const token = computeConfig.token || \"CST\";\n    const balance = await getUserBalance(runtime, token);\n\n    // Ensure unlockedBalance and decimals exist and are valid\n    if (!balance.unlockedBalance || !balance.token?.decimal) {\n        throw new Error(\"Invalid balance info structure\");\n    }\n\n    const unlockedBalance = BigInt(balance.unlockedBalance);\n    const decimal = BigInt(balance.token.decimal);\n    const divisor = BigInt(10) ** decimal;\n\n    // Calculate withdrawal amount and convert to string with proper decimal places\n    const balanceAmount = Number(unlockedBalance) / Number(divisor);\n\n    const requiredAmount =\n        calculateGPUPrice(computeConfig.computeResources?.gpu) *\n        (computeConfig.duration ? parseDuration(computeConfig.duration) : 1);\n\n    if (balanceAmount < requiredAmount) {\n        throw new Error(\n            `Insufficient balance. Available: ${balanceAmount} ${token}, Required: ${requiredAmount} ${token}`\n        );\n    }\n\n    const result = await updateOrder(\n        runtime,\n        leaseId.toString(),\n        generateICLYaml(computeConfig)\n    );\n\n    // Wait for new deployment to be ready\n    let isReady = false;\n    const maxAttempts = 10; // 10 times with 10-second intervals\n    let attempts = 0;\n\n    while (!isReady && attempts < maxAttempts) {\n        const status = await getDeploymentStatus(runtime, leaseId.toString());\n        elizaLogger.debug(\n            `Deployment status (attempt ${attempts + 1}/${maxAttempts}):`,\n            status\n        );\n\n        if (status) {\n            isReady = true;\n        } else {\n            await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds between checks\n            attempts++;\n        }\n    }\n\n    if (isReady) {\n        elizaLogger.log(\"Deployment ready\");\n    } else {\n        elizaLogger.error(`Deployment not ready after ${maxAttempts} attempts`);\n        throw new Error(\"Deployment timeout\");\n    }\n    return result;\n};\n\nexport const createOrder = async (\n    runtime: IAgentRuntime,\n    iclYaml: string\n): Promise<{ leaseId: string; transaction: any }> => {\n    elizaLogger.debug(\"Creating order with iclYaml:\", iclYaml);\n    const sdk = await getSDKInstance(runtime);\n    const config = await validateSpheronConfig(runtime);\n    return await sdk.deployment.createDeployment(\n        iclYaml,\n        config.PROVIDER_PROXY_URL\n    );\n};\n\nexport const updateOrder = async (\n    runtime: IAgentRuntime,\n    leaseId: string,\n    iclYaml: string\n): Promise<{ providerAddress: string }> => {\n    const sdk = await getSDKInstance(runtime);\n    const config = await validateSpheronConfig(runtime);\n    return await sdk.deployment.updateDeployment(\n        leaseId,\n        iclYaml,\n        config.PROVIDER_PROXY_URL\n    );\n};\n\nexport const getDeployment = async (\n    runtime: IAgentRuntime,\n    leaseId: string\n): Promise<DeploymentDetails> => {\n    elizaLogger.debug(\"Getting deployment with lease ID:\", leaseId);\n    const sdk = await getSDKInstance(runtime);\n    const config = await validateSpheronConfig(runtime);\n    return await sdk.deployment.getDeployment(\n        leaseId,\n        config.PROVIDER_PROXY_URL\n    );\n};\n\nexport const closeDeployment = async (\n    runtime: IAgentRuntime,\n    leaseId: string\n): Promise<unknown> => { // Replace any with unknown\n    const sdk = await getSDKInstance(runtime);\n    return await sdk.deployment.closeDeployment(leaseId);\n};\n\nexport async function getDeploymentStatus(\n    runtime: IAgentRuntime,\n    deploymentId: string\n): Promise<boolean> {\n    try {\n        const deployment = await getDeployment(runtime, deploymentId);\n        const service = Object.values(deployment.services)[0];\n        return service.ready_replicas === service.total;\n    } catch (error: any) {\n        throw new Error(`Failed to get deployment status: ${error.message}`);\n    }\n}\n\nfunction calculateGPUPrice(gpu?: { model?: string; count?: number }): number {\n    if (!gpu) return 1;\n\n    const basePrice = (() => {\n        switch (gpu.model?.toLowerCase()) {\n            // Consumer GPUs\n            case \"rtx4090\":\n                return 0.7;\n            case \"rtx3090\":\n                return 0.5;\n            case \"rtx3080\":\n                return 0.4;\n            case \"rtx3070\":\n                return 0.3;\n            // Data Center GPUs\n            case \"h100\":\n                return 3.0;\n            case \"a100\":\n                return 1.5;\n            case \"a40\":\n                return 1.2;\n            case \"a30\":\n                return 1.2;\n            case \"a16\":\n                return 1.0;\n            // Default case\n            default:\n                return 0.5;\n        }\n    })();\n\n    return basePrice * (gpu.count || 1);\n}\n\nexport function generateICLYaml(config: SpheronComputeConfig): string {\n    return `version: \"1.0\"\nservices:\n  ${config.name}:\n    image: ${config.image}\n    ${\n        config.ports\n            ? `expose:\n      ${config.ports\n          .map(\n              (p) => `- port: ${p.containerPort}\n        as: ${p.servicePort}\n        to:\n          - global: true`\n          )\n          .join(\"\\n      \")}`\n            : \"\"\n    }\n    ${\n        config.env\n            ? `env:\n      ${config.env.map((e) => `- ${e.name}=${e.value}`).join(\"\\n      \")}`\n            : \"\"\n    }\nprofiles:\n  name: ${config.name}\n  duration: ${config.duration || \"24h\"}\n  mode: ${config.mode || \"provider\"}\n  tier:\n    - community\n  compute:\n    ${config.name}:\n      resources:\n        cpu:\n          units: ${config.computeResources?.cpu || 2}\n        memory:\n          size: ${config.computeResources?.memory || \"2Gi\"}\n        storage:\n          - size: ${config.computeResources?.storage || \"10Gi\"}\n        ${\n            config.computeResources?.gpu\n                ? `gpu:\n          units: ${config.computeResources?.gpu?.count || 1}\n          attributes:\n            vendor:\n              nvidia:\n                - model: ${config.computeResources?.gpu?.model || \"rtx4090\"}`\n                : \"\"\n        }\n  placement:\n    westcoast:\n      pricing:\n        ${config.name}:\n          token: ${config.token || \"CST\"}\n          amount: ${calculateGPUPrice(config.computeResources?.gpu)}\ndeployment:\n  ${config.name}:\n    westcoast:\n      profile: ${config.name}\n      count: ${config.replicas || 1}`;\n}\n\nfunction parseDuration(duration: string): number {\n    const match = duration.match(/^(\\d*\\.?\\d+)(h|d|w|m)$/);\n    if (!match) {\n        throw new Error(\n            \"Invalid duration format. Expected format: number (can include decimals) followed by h(hours), d(days), w(weeks), or m(months)\"\n        );\n    }\n\n    const [, value, unit] = match;\n    const numValue = Number.parseFloat(value);\n\n    switch (unit) {\n        case \"min\":\n            return numValue / 60;\n        case \"h\":\n            return numValue;\n        case \"d\":\n            return numValue * 24;\n        case \"w\":\n            return numValue * 7 * 24;\n        case \"m\":\n            return numValue * 30 * 24;\n        default:\n            return 1;\n    }\n}\n","export const SUPPORTED_TOKENS = {\n    USDT: \"USDT\",\n    USDC: \"USDC\",\n    DAI: \"DAI\",\n    WETH: \"WETH\",\n    CST: \"CST\",\n} as const;\n\nexport const DEPLOYMENT_CONFIGS = {\n    DEFAULT_PROVIDER_PROXY_URL: \"http://localhost:3040\",\n    NETWORK: \"testnet\",\n} as const;\n\nexport const LEASE_STATES = {\n    ACTIVE: \"ACTIVE\",\n    TERMINATED: \"TERMINATED\",\n} as const;\n\nexport const DEFAULT_PAGE_SIZE = 10;\n\nexport const AVAILABLE_GPU_MODELS = [\n    \"rtx4090\",\n    \"h100\",\n    \"rtx3090\",\n    \"t4\",\n    \"rtx4070tisuper\",\n    \"rtx4070\",\n    \"rtx4070ti\",\n    \"rtx6000-ada\",\n    \"t1000\",\n    \"a100\",\n    \"v100\",\n    \"p4\",\n];\n","import {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    elizaLogger,\n    composeContext,\n    ModelClass,\n    generateObjectDeprecated,\n} from \"@elizaos/core\";\nimport { validateSpheronConfig } from \"../environment.ts\";\nimport {\n    getDeployment,\n    updateDeployment,\n    closeDeployment,\n    startDeployment,\n} from \"../utils/index.ts\";\nimport type { DeploymentContent } from \"../types/index.ts\";\nimport { AVAILABLE_GPU_MODELS } from \"../utils/constants.ts\";\nimport { DEPLOYMENT_TEMPLATES } from \"../utils/template.ts\";\n\nfunction isDeploymentContent(content: unknown): content is DeploymentContent {\n    elizaLogger.debug(\"Content for deployment operation:\", content);\n\n    // First, check if content is an object\n    if (typeof content !== 'object' || content === null) {\n        return false;\n    }\n\n    // Type assertion to access properties safely\n    const contentObj = content as Record<string, unknown>;\n\n    // Check operation property\n    if (\n        typeof contentObj.operation !== \"string\" ||\n        ![\"create\", \"update\", \"close\"].includes(contentObj.operation)\n    ) {\n        return false;\n    }\n\n    // Check properties based on operation\n    switch (contentObj.operation) {\n        case \"create\":\n            return (\n                typeof contentObj.template === \"string\" &&\n                typeof contentObj.customizations === \"object\"\n            );\n        case \"update\":\n            return (\n                typeof contentObj.leaseId === \"string\" &&\n                typeof contentObj.template === \"string\" &&\n                typeof contentObj.customizations === \"object\"\n            );\n        case \"close\":\n            return typeof contentObj.leaseId === \"string\";\n        default:\n            return false;\n    }\n}\n// function isDeploymentContent(content: any): content is DeploymentContent {\n//     elizaLogger.debug(\"Content for deployment operation:\", content);\n//     if (\n//         typeof content.operation !== \"string\" ||\n//         ![\"create\", \"update\", \"close\"].includes(content.operation)\n//     ) {\n//         return false;\n//     }\n\n//     switch (content.operation) {\n//         case \"create\":\n//             return (\n//                 typeof content.template === \"string\" &&\n//                 typeof content.customizations === \"object\"\n//             );\n//         case \"update\":\n//             return (\n//                 typeof content.leaseId === \"string\" &&\n//                 typeof content.template === \"string\" &&\n//                 typeof content.customizations === \"object\"\n//             );\n//         case \"close\":\n//             return typeof content.leaseId === \"string\";\n//         default:\n//             return false;\n//     }\n// }\n\n// Generate template descriptions dynamically\nconst templateDescriptions = Object.entries(DEPLOYMENT_TEMPLATES)\n    .map(([key, template]) => `- ${key}: ${template.description}`)\n    .join(\"\\n\");\n\nconst deploymentTemplate = `Respond with a JSON markdown block containing only the extracted values for the requested deployment operation.\n\nExample responses for different operations:\n\n1. Creating a new deployment:\n\\`\\`\\`json\n{\n    \"operation\": \"create\",\n    \"template\": \"<template-name>\",  // One of: jupyter-notebook, ollama-webui, vscode-pytorch\n    \"customizations\": {\n        \"cpu\": <true|false>,                // Extract CPU-only preference from context or put a default value of false. eg. no gpu needed or something like that\n        \"resources\": {               // Extract resource requirements from context\n            \"cpu\": \"<requested-cpu>\", // Extract cpu requirements from context or put a default value of 4\n            \"memory\": \"<requested-memory>\", // Extract memory requirements from context or put a default value of 8Gi\n            \"storage\": \"<requested-storage>\", // Extract storage requirements from context or put a default value of 100Gi\n            \"gpu\": \"<requested-gpu-count>\", // Extract gpu requirements from context or put a default value of 1\n            \"gpu_model\": \"<requested-gpu-model>\" // Extract gpu model requirements from context or put a default value of rtx4090\n        },\n        \"duration\": \"<requested-duration>\" // Extract duration requirements from context or put a default value of 1h\n        \"token\": \"<requested-token>\" // Extract token requirements from context or put a default value of CST\n        \"template\": {\n            \"heuristMinerAddress\": \"<requested-heurist-miner-address>\" // Extract heurist miner address requirements from context\n        }\n    }\n}\n\\`\\`\\`\n\n2. Updating an existing deployment:\n\\`\\`\\`json\n{\n    \"operation\": \"update\",\n    \"leaseId\": \"existing-lease-id\", // Extract lease ID from context\n    \"template\": \"<template-name>\", // One of: jupyter-notebook, ollama-webui, vscode-pytorch\n    \"customizations\": {\n        \"cpu\": <true|false>,   // Extract cpu-only preference from context or put a default value of false. eg. no gpu needed or something like that\n        \"resources\": {               // Extract updated resource requirements from context\n            \"cpu\": \"<requested-cpu>\", // Extract cpu requirements from context or put a default value of 4\n            \"memory\": \"<requested-memory>\", // Extract memory requirements from context or put a default value of 8Gi\n            \"storage\": \"<requested-storage>\", // Extract storage requirements from context or put a default value of 100Gi\n            \"gpu\": \"<requested-gpu-count>\", // Extract gpu requirements from context or put a default value of 1\n            \"gpu_model\": \"<requested-gpu-model>\" // Extract gpu model requirements from context or put a default value of rtx4090\n        },\n        \"duration\": \"<requested-duration>\" // Extract duration requirements from context or put a default value of 1h\n        \"token\": \"<requested-token>\" // Extract token requirements from context or put a default value of CST\n    }\n}\n\\`\\`\\`\n\n3. Closing a deployment:\n\\`\\`\\`json\n{\n    \"operation\": \"close\",\n    \"leaseId\": \"lease-id-to-close\"\n}\n\\`\\`\\`\n\n## Available Templates\n${templateDescriptions}\n\n## Available GPU Models\n${AVAILABLE_GPU_MODELS.map((gpu) => `- ${gpu}`).join(\"\\n\")}\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested deployment:\n- Desired template name from the context\n- CPU-only requirement (if specified) from the context\n- Any customization requirements GPU model and it's count, cpu and memory resources properly from the context\n- Token (if specified) from the context\n- Duration (if specified) from the context\n- Lease ID (if updating or closing) from the context\n- Operation (create, update, close) from the context\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"DEPLOYMENT_OPERATION\",\n    similes: [\n        \"CREATE_DEPLOYMENT\",\n        \"UPDATE_DEPLOYMENT\",\n        \"GET_DEPLOYMENT\",\n        \"CLOSE_DEPLOYMENT\",\n        \"DEPLOY_SERVICE\",\n        \"MANAGE_DEPLOYMENT\",\n        \"LAUNCH_SERVICE\",\n        \"START_DEPLOYMENT\",\n        \"SETUP_DEPLOYMENT\",\n    ],\n    description:\n        \"MUST use this action if the user requests to create, update, or manage a deployment. The request might vary, but it will always be related to deployment operations.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateSpheronConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting DEPLOYMENT_OPERATION handler...\");\n\n        // Create local variable for state manipulation\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Filter only \"just now\" and last couple of user messages\n        state.recentMessages = state.recentMessages\n            .split(\"\\n\")\n            .filter(\n                (line) => line.includes(\"(just now)\") || line.includes(\"(user)\")\n            )\n            .slice(-2)\n            .join(\"\\n\");\n\n        // Compose deployment context\n        const deploymentContext = composeContext({\n            state: currentState,\n            template: deploymentTemplate,\n        });\n\n        // Generate deployment content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: deploymentContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Validate deployment content\n        if (!isDeploymentContent(content)) {\n            elizaLogger.error(\n                \"Invalid content for DEPLOYMENT_OPERATION action.\"\n            );\n            callback?.({\n                text: \"Unable to process deployment request. Invalid content provided.\",\n                content: { error: \"Invalid deployment content\" },\n            });\n            return false;\n        }\n\n        try {\n            switch (content.operation) {\n                case \"create\": {\n                    if (\n                        !content.template ||\n                        !DEPLOYMENT_TEMPLATES[content.template]\n                    ) {\n                        throw new Error(\n                            `Unsupported template: ${content.template}. Available templates are: ${Object.keys(DEPLOYMENT_TEMPLATES).join(\", \")}`\n                        );\n                    }\n\n                    const computeConfig = DEPLOYMENT_TEMPLATES[\n                        content.template\n                    ].config(content.customizations);\n                    const result = await startDeployment(\n                        runtime,\n                        computeConfig\n                    );\n\n                    elizaLogger.log(\n                        \"Deployment created with lease ID:\",\n                        result.leaseId.toString()\n                    );\n\n                    const deploymentDetails = await getDeployment(\n                        runtime,\n                        result.leaseId.toString()\n                    );\n                    const service = Object.values(\n                        deploymentDetails.services\n                    )[0];\n\n                    // Get forwarded ports information\n                    const ports =\n                        deploymentDetails.forwarded_ports[service.name] || [];\n                    const portInfo = ports\n                        .map(\n                            (p) =>\n                                `${p.host}:${p.externalPort} for Port ${p.port}`\n                        )\n                        .join(\", \");\n\n                    console.log(\"Final response:\", {\n                        text: `Deployment created and ready!\\nLease ID: ${result.leaseId.toString()}\\n${portInfo ? `Access URLs: ${portInfo}` : \"\"}`,\n                        content: {\n                            success: true,\n                            leaseId: result.leaseId.toString(),\n                            details: deploymentDetails,\n                            ports: ports,\n                        },\n                    });\n\n                    callback?.({\n                        text: `Deployment created and ready!\\nLease ID: ${result.leaseId.toString()}\\n${portInfo ? `Access URLs: ${portInfo}` : \"\"}`,\n                        content: {\n                            success: true,\n                            leaseId: result.leaseId.toString(),\n                            details: deploymentDetails,\n                            ports: ports,\n                        },\n                    });\n                    break;\n                }\n                case \"update\": {\n                    if (\n                        !content.leaseId ||\n                        !content.customizations ||\n                        !content.template\n                    ) {\n                        throw new Error(\n                            \"Lease ID, template, and customizations are required for deployment update\"\n                        );\n                    }\n\n                    if (!DEPLOYMENT_TEMPLATES[content.template]) {\n                        throw new Error(\n                            `Unsupported template: ${content.template}`\n                        );\n                    }\n\n                    const computeConfig = DEPLOYMENT_TEMPLATES[\n                        content.template\n                    ].config(content.customizations);\n                    const result = await updateDeployment(\n                        runtime,\n                        content.leaseId.toString(),\n                        computeConfig\n                    );\n                    elizaLogger.log(\n                        \"Deployment updated with lease ID:\",\n                        result.leaseId.toString()\n                    );\n\n                    const newDetails = await getDeployment(\n                        runtime,\n                        content.leaseId.toString()\n                    );\n                    callback?.({\n                        text: `Deployment ${content.leaseId.toString()} updated successfully`,\n                        content: {\n                            success: true,\n                            details: newDetails,\n                        },\n                    });\n                    break;\n                }\n                case \"close\": {\n                    if (!content.leaseId) {\n                        throw new Error(\n                            \"Lease ID is required for deployment closure\"\n                        );\n                    }\n                    const result = await closeDeployment(\n                        runtime,\n                        content.leaseId.toString()\n                    );\n                    elizaLogger.log(\n                        \"Deployment closed with lease ID:\",\n                        content.leaseId.toString()\n                    );\n\n                    callback?.({\n                        text: `Deployment ${content.leaseId.toString()} closed successfully`,\n                        content: {\n                            success: true,\n                            transaction: result,\n                        },\n                    });\n                    break;\n                }\n            }\n            return true;\n        } catch (error) {\n            console.log(\"Error:\", error);\n            elizaLogger.error(\"Deployment operation failed:\", error.message);\n            callback?.({\n                text: \"Deployment operation failed\",\n                content: {\n                    error:\n                        error instanceof Error\n                            ? error.message\n                            : \"Unknown error\",\n                },\n            });\n            return false;\n        }\n    },\n    examples: [\n        // Create deployment examples with templates\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy a Jupyter notebook with GPU\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up your Jupyter notebook deployment with GPU support...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a CPU-only Jupyter notebook deployment\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up your CPU-only Jupyter notebook deployment...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy Jupyter notebook with A100 GPU and 32GB memory\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up your Jupyter notebook deployment with A100 GPU and custom resources...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy Ollama WebUI with RTX 4090\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up Ollama WebUI with RTX 4090 GPU support...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a VS Code deployment with PyTorch and T4 GPU\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up VS Code PyTorch environment with T4 GPU...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy a Jupyter notebook with GPU and token USDT\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Setting up your Jupyter notebook deployment with GPU support and token USDT...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        // Update deployment examples\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Upgrade my deployment abc123 to use an A100 GPU\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Updating deployment abc123 to use A100 GPU...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Scale up the memory to 64GB for deployment xyz789\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Updating deployment resources...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Update my deployment abc123 to use an A100 GPU and token USDT\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Updating deployment abc123 to use A100 GPU and token USDT...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        // Close deployment examples\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Close deployment abc123\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Closing deployment abc123...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to stop my deployment abc123\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Closing deployment abc123...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Stop my Jupyter notebook deployment xyz789\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Terminating Jupyter notebook deployment xyz789...\",\n                    action: \"DEPLOYMENT_OPERATION\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import type { Customizations, SpheronComputeConfig } from \"../types/index.ts\";\n\ninterface TemplateDefinition {\n    description: string;\n    config: (customizations?: any) => SpheronComputeConfig;\n}\n\nexport const DEPLOYMENT_TEMPLATES: Record<string, TemplateDefinition> = {\n    \"jupyter-notebook\": {\n        description: \"Jupyter Notebook environment for AI development\",\n        config: (customizations: Customizations) => ({\n            name: \"jupyter\",\n            image: customizations.cpu\n                ? \"jupyter/minimal-notebook:latest\"\n                : \"quay.io/jupyter/pytorch-notebook:cuda12-pytorch-2.4.1\",\n            ports: [\n                {\n                    containerPort: 8888,\n                    servicePort: 8888,\n                },\n            ],\n            env: [\n                {\n                    name: \"JUPYTER_TOKEN\",\n                    value: \"spheron\",\n                },\n            ],\n            computeResources: {\n                cpu: customizations.resources?.cpu || 4,\n                memory: customizations.resources?.memory || \"8Gi\",\n                storage: customizations.resources?.storage || \"10Gi\",\n                ...(!customizations.cpu && {\n                    gpu: {\n                        count: customizations.resources?.gpu || 1,\n                        model: customizations.resources?.gpu_model || \"rtx4090\",\n                    },\n                }),\n            },\n            duration: customizations.duration || \"1d\",\n            token: customizations.token || \"CST\",\n        }),\n    },\n    \"ollama-webui\": {\n        description: \"Ollama Web UI for managing and interacting with LLMs\",\n        config: (customizations: Customizations) => ({\n            name: \"ollama-webui\",\n            image: \"ghcr.io/open-webui/open-webui:ollama\",\n            ports: [\n                {\n                    containerPort: 8080,\n                    servicePort: 8080,\n                },\n                {\n                    containerPort: 11434,\n                    servicePort: 11434,\n                },\n            ],\n            computeResources: {\n                cpu: customizations.resources?.cpu || 4,\n                memory: customizations.resources?.memory || \"8Gi\",\n                storage: customizations.resources?.storage || \"20Gi\",\n                ...(!customizations.cpu && {\n                    gpu: {\n                        count: customizations.resources?.gpu || 1,\n                        model: customizations.resources?.gpu_model || \"rtx4090\",\n                    },\n                }),\n            },\n            duration: customizations.duration || \"1d\",\n            token: customizations.token || \"CST\",\n        }),\n    },\n    \"vscode-pytorch\": {\n        description: \"VS Code Server with PyTorch development environment\",\n        config: (customizations: Customizations) => ({\n            name: \"vscode\",\n            image: customizations.cpu\n                ? \"lscr.io/linuxserver/code-server\"\n                : \"spheronnetwork/vscode-pytorch:latest\",\n            ports: [\n                {\n                    containerPort: 8443,\n                    servicePort: 8443,\n                },\n            ],\n            env: [\n                {\n                    name: \"PASSWORD\",\n                    value: \"spheron\",\n                },\n            ],\n            computeResources: {\n                cpu: customizations.resources?.cpu || 4,\n                memory: customizations.resources?.memory || \"8Gi\",\n                storage: customizations.resources?.storage || \"20Gi\",\n                ...(!customizations.cpu && {\n                    gpu: {\n                        count: customizations.resources?.gpu || 1,\n                        model: customizations.resources?.gpu_model || \"rtx4090\",\n                    },\n                }),\n            },\n            duration: customizations.duration || \"1d\",\n            token: customizations.token || \"CST\",\n        }),\n    },\n    \"heurist-miner\": {\n        description: \"Heurist Miner for mining Heurist network\",\n        config: (customizations: Customizations) => ({\n            name: \"heurist-miner\",\n            image: \"spheronnetwork/heurist-miner:latest\",\n            ports: [\n                {\n                    containerPort: 8888,\n                    servicePort: 8888,\n                },\n            ],\n            env: [\n                {\n                    name: \"MINER_ID_0\",\n                    value: customizations.template?.heuristMinerAddress || \"\",\n                },\n                {\n                    name: \"LOG_LEVEL\",\n                    value: \"INFO\",\n                },\n            ],\n            computeResources: {\n                cpu: customizations.resources?.cpu || 8,\n                memory: customizations.resources?.memory || \"16Gi\",\n                storage: customizations.resources?.storage || \"200Gi\",\n                ...(!customizations.cpu && {\n                    gpu: {\n                        count: customizations.resources?.gpu || 1,\n                        model: customizations.resources?.gpu_model || \"rtx4090\",\n                    },\n                }),\n            },\n            duration: customizations.duration || \"1d\",\n            token: customizations.token || \"CST\",\n        }),\n    },\n};\n","import {\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { SUPPORTED_TOKENS } from \"../utils/constants.ts\";\n\nexport const tokensProvider: Provider = {\n    get: async (_runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        elizaLogger.debug(\"tokensProvider::get\");\n        const tokens = Object.entries(SUPPORTED_TOKENS)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(\"\\n\");\n        return `The supported tokens for Spheron operations are:\\n${tokens}`;\n    },\n};\n","import {\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { DEPLOYMENT_CONFIGS } from \"../utils/constants.ts\";\n\nexport const deploymentProvider: Provider = {\n    get: async (_runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        elizaLogger.debug(\"deploymentProvider::get\");\n        const configs = Object.entries(DEPLOYMENT_CONFIGS)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(\"\\n\");\n        return `The deployment configuration settings are:\\n${configs}`;\n    },\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport escrow from \"./actions/escrow.ts\";\nimport deployment from \"./actions/deployment.ts\";\nimport { tokensProvider } from \"./providers/tokens.ts\";\nimport { deploymentProvider } from \"./providers/deployment.ts\";\nimport {\n    SUPPORTED_TOKENS,\n    DEPLOYMENT_CONFIGS,\n    LEASE_STATES,\n} from \"./utils/constants.ts\";\n\nexport const CONFIG = {\n    SUPPORTED_TOKENS,\n    DEPLOYMENT_CONFIGS,\n    LEASE_STATES,\n};\n\nexport const spheronPlugin: Plugin = {\n    name: \"spheron\",\n    description: \"Spheron Protocol Plugin for Eliza\",\n    actions: [escrow, deployment],\n    evaluators: [],\n    providers: [tokensProvider, deploymentProvider],\n};\n\nexport default spheronPlugin;\n\n// Export types\nexport * from \"./types/index.ts\";\nexport * from \"./environment.ts\";\nexport * from \"./utils/index.ts\";\n"],"mappings":";AAAA;AAAA,EAOI,eAAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;;;ACVP,SAAS,SAAS;AAEX,IAAM,mBAAmB,EAAE,OAAO;AAAA,EACrC,aAAa,EAAE,OAAO,EAAE,IAAI,GAAG,yBAAyB;AAAA,EACxD,oBAAoB,EACf,OAAO,EACP,IAAI,wCAAwC;AAAA,EACjD,gBAAgB,EAAE,OAAO,EAAE,IAAI,GAAG,4BAA4B;AAAA,EAC9D,oBAAoB,EAAE,OAAO,EAAE,SAAS;AAC5C,CAAC;AAEM,IAAM,kBAAkB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AACJ;AAIA,eAAsB,sBAClB,SACsB;AACtB,MAAI;AACA,UAAM,SAAS;AAAA,MACX,aACI,QAAQ,WAAW,aAAa,KAChC,QAAQ,IAAI,uBACZ,QAAQ,IAAI;AAAA,MAChB,oBACI,QAAQ,WAAW,oBAAoB,KACvC,QAAQ,IAAI,8BACZ,QAAQ,IAAI;AAAA,MAChB,gBACI,QAAQ,WAAW,gBAAgB,KACnC,QAAQ,IAAI,0BACZ,QAAQ,IAAI;AAAA,IACpB;AAEA,WAAO,iBAAiB,MAAM,MAAM;AAAA,EACxC,SAAS,OAAO;AACZ,QAAI,iBAAiB,EAAE,UAAU;AAC7B,YAAM,gBAAgB,MAAM,OACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,IAAI,OAAO,EAAE,EACpD,KAAK,IAAI;AACd,YAAM,IAAI;AAAA,QACN;AAAA,EAA6C,aAAa;AAAA,MAC9D;AAAA,IACJ;AACA,UAAM;AAAA,EACV;AACJ;;;ACnDA,SAA6B,mBAAmB;AAChD,SAAS,kBAAkB;AAQpB,IAAM,iBAAiB,OAC1B,YACsB;AACtB,QAAM,SAAS,MAAM,sBAAsB,OAAO;AAClD,SAAO,IAAI,WAAW,WAAW,OAAO,WAAW;AACvD;AAGO,IAAM,iBAAiB,OAC1B,SACA,OACA,kBACuB;AACvB,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,SAAO,MAAM,IAAI,OAAO,eAAe,OAAO,aAAa;AAC/D;AAEO,IAAM,iBAAiB,OAC1B,SACA,OACA,WACmB;AACnB,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,SAAO,MAAM,IAAI,OAAO,eAAe;AAAA,IACnC;AAAA,IACA;AAAA,IACA,mBAAmB,CAAC,UAAU;AAC1B,kBAAY,MAAM,oBAAoB,KAAK;AAC3C,YAAM;AAAA,IACV;AAAA,EACJ,CAAC;AACL;AAEO,IAAM,kBAAkB,OAC3B,SACA,OACA,WACmB;AACnB,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,SAAO,MAAM,IAAI,OAAO,gBAAgB;AAAA,IACpC;AAAA,IACA;AAAA,IACA,mBAAmB,CAAC,UAAU;AAC1B,kBAAY,MAAM,sBAAsB,KAAK;AAC7C,YAAM;AAAA,IACV;AAAA,EACJ,CAAC;AACL;AAGO,IAAM,kBAAkB,OAC3B,SACA,kBACe;AAEf,QAAM,QAAQ,cAAc,SAAS;AACrC,QAAM,UAAU,MAAM,eAAe,SAAS,KAAK;AAGnD,MAAI,CAAC,QAAQ,mBAAmB,CAAC,QAAQ,OAAO,SAAS;AACrD,UAAM,IAAI,MAAM,gCAAgC;AAAA,EACpD;AAEA,QAAM,kBAAkB,OAAO,QAAQ,eAAe;AACtD,QAAM,UAAU,OAAO,QAAQ,MAAM,OAAO;AAC5C,QAAM,UAAU,OAAO,EAAE,KAAK;AAG9B,QAAM,gBAAgB,OAAO,eAAe,IAAI,OAAO,OAAO;AAE9D,QAAM,iBACF,kBAAkB,cAAc,kBAAkB,GAAG,KACpD,cAAc,WAAW,cAAc,cAAc,QAAQ,IAAI;AAEtE,MAAI,gBAAgB,gBAAgB;AAChC,UAAM,IAAI;AAAA,MACN,oCAAoC,aAAa,IAAI,KAAK,eAAe,cAAc,IAAI,KAAK;AAAA,IACpG;AAAA,EACJ;AAEA,QAAM,SAAS,MAAM,YAAY,SAAS,gBAAgB,aAAa,CAAC;AAExE,MAAI,UAAU;AACd,QAAM,cAAc;AACpB,MAAI,WAAW;AAEf,SAAO,CAAC,WAAW,WAAW,aAAa;AACvC,UAAM,SAAS,MAAM;AAAA,MACjB;AAAA,MACA,OAAO,QAAQ,SAAS;AAAA,IAC5B;AACA,gBAAY;AAAA,MACR,8BAA8B,WAAW,CAAC,IAAI,WAAW;AAAA,MACzD;AAAA,IACJ;AAEA,QAAI,QAAQ;AACR,gBAAU;AAAA,IACd,OAAO;AACH,YAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAK,CAAC;AACzD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,SAAS;AACT,gBAAY,IAAI,kBAAkB;AAAA,EACtC,OAAO;AACH,gBAAY,MAAM,8BAA8B,WAAW,WAAW;AACtE,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACxC;AACA,SAAO;AACX;AAEO,IAAM,mBAAmB,OAC5B,SACA,SACA,kBACe;AAEf,QAAM,QAAQ,cAAc,SAAS;AACrC,QAAM,UAAU,MAAM,eAAe,SAAS,KAAK;AAGnD,MAAI,CAAC,QAAQ,mBAAmB,CAAC,QAAQ,OAAO,SAAS;AACrD,UAAM,IAAI,MAAM,gCAAgC;AAAA,EACpD;AAEA,QAAM,kBAAkB,OAAO,QAAQ,eAAe;AACtD,QAAM,UAAU,OAAO,QAAQ,MAAM,OAAO;AAC5C,QAAM,UAAU,OAAO,EAAE,KAAK;AAG9B,QAAM,gBAAgB,OAAO,eAAe,IAAI,OAAO,OAAO;AAE9D,QAAM,iBACF,kBAAkB,cAAc,kBAAkB,GAAG,KACpD,cAAc,WAAW,cAAc,cAAc,QAAQ,IAAI;AAEtE,MAAI,gBAAgB,gBAAgB;AAChC,UAAM,IAAI;AAAA,MACN,oCAAoC,aAAa,IAAI,KAAK,eAAe,cAAc,IAAI,KAAK;AAAA,IACpG;AAAA,EACJ;AAEA,QAAM,SAAS,MAAM;AAAA,IACjB;AAAA,IACA,QAAQ,SAAS;AAAA,IACjB,gBAAgB,aAAa;AAAA,EACjC;AAGA,MAAI,UAAU;AACd,QAAM,cAAc;AACpB,MAAI,WAAW;AAEf,SAAO,CAAC,WAAW,WAAW,aAAa;AACvC,UAAM,SAAS,MAAM,oBAAoB,SAAS,QAAQ,SAAS,CAAC;AACpE,gBAAY;AAAA,MACR,8BAA8B,WAAW,CAAC,IAAI,WAAW;AAAA,MACzD;AAAA,IACJ;AAEA,QAAI,QAAQ;AACR,gBAAU;AAAA,IACd,OAAO;AACH,YAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAK,CAAC;AACzD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,SAAS;AACT,gBAAY,IAAI,kBAAkB;AAAA,EACtC,OAAO;AACH,gBAAY,MAAM,8BAA8B,WAAW,WAAW;AACtE,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACxC;AACA,SAAO;AACX;AAEO,IAAM,cAAc,OACvB,SACA,YACiD;AACjD,cAAY,MAAM,gCAAgC,OAAO;AACzD,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,QAAM,SAAS,MAAM,sBAAsB,OAAO;AAClD,SAAO,MAAM,IAAI,WAAW;AAAA,IACxB;AAAA,IACA,OAAO;AAAA,EACX;AACJ;AAEO,IAAM,cAAc,OACvB,SACA,SACA,YACuC;AACvC,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,QAAM,SAAS,MAAM,sBAAsB,OAAO;AAClD,SAAO,MAAM,IAAI,WAAW;AAAA,IACxB;AAAA,IACA;AAAA,IACA,OAAO;AAAA,EACX;AACJ;AAEO,IAAM,gBAAgB,OACzB,SACA,YAC6B;AAC7B,cAAY,MAAM,qCAAqC,OAAO;AAC9D,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,QAAM,SAAS,MAAM,sBAAsB,OAAO;AAClD,SAAO,MAAM,IAAI,WAAW;AAAA,IACxB;AAAA,IACA,OAAO;AAAA,EACX;AACJ;AAEO,IAAM,kBAAkB,OAC3B,SACA,YACmB;AACnB,QAAM,MAAM,MAAM,eAAe,OAAO;AACxC,SAAO,MAAM,IAAI,WAAW,gBAAgB,OAAO;AACvD;AAEA,eAAsB,oBAClB,SACA,cACgB;AAChB,MAAI;AACA,UAAM,aAAa,MAAM,cAAc,SAAS,YAAY;AAC5D,UAAM,UAAU,OAAO,OAAO,WAAW,QAAQ,EAAE,CAAC;AACpD,WAAO,QAAQ,mBAAmB,QAAQ;AAAA,EAC9C,SAAS,OAAY;AACjB,UAAM,IAAI,MAAM,oCAAoC,MAAM,OAAO,EAAE;AAAA,EACvE;AACJ;AAEA,SAAS,kBAAkB,KAAkD;AACzE,MAAI,CAAC,IAAK,QAAO;AAEjB,QAAM,aAAa,MAAM;AACrB,YAAQ,IAAI,OAAO,YAAY,GAAG;AAAA;AAAA,MAE9B,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA;AAAA,MAEX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA;AAAA,MAEX;AACI,eAAO;AAAA,IACf;AAAA,EACJ,GAAG;AAEH,SAAO,aAAa,IAAI,SAAS;AACrC;AAEO,SAAS,gBAAgB,QAAsC;AAClE,SAAO;AAAA;AAAA,IAEP,OAAO,IAAI;AAAA,aACF,OAAO,KAAK;AAAA,MAEjB,OAAO,QACD;AAAA,QACN,OAAO,MACJ;AAAA,IACG,CAAC,MAAM,WAAW,EAAE,aAAa;AAAA,cACjC,EAAE,WAAW;AAAA;AAAA;AAAA,EAGjB,EACC,KAAK,UAAU,CAAC,KACb,EACV;AAAA,MAEI,OAAO,MACD;AAAA,QACN,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,EAAE,KAAK,EAAE,EAAE,KAAK,UAAU,CAAC,KAC1D,EACV;AAAA;AAAA,UAEM,OAAO,IAAI;AAAA,cACP,OAAO,YAAY,KAAK;AAAA,UAC5B,OAAO,QAAQ,UAAU;AAAA;AAAA;AAAA;AAAA,MAI7B,OAAO,IAAI;AAAA;AAAA;AAAA,mBAGE,OAAO,kBAAkB,OAAO,CAAC;AAAA;AAAA,kBAElC,OAAO,kBAAkB,UAAU,KAAK;AAAA;AAAA,oBAEtC,OAAO,kBAAkB,WAAW,MAAM;AAAA,UAElD,OAAO,kBAAkB,MACnB;AAAA,mBACC,OAAO,kBAAkB,KAAK,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA,2BAIhC,OAAO,kBAAkB,KAAK,SAAS,SAAS,KACzD,EACV;AAAA;AAAA;AAAA;AAAA,UAIE,OAAO,IAAI;AAAA,mBACF,OAAO,SAAS,KAAK;AAAA,oBACpB,kBAAkB,OAAO,kBAAkB,GAAG,CAAC;AAAA;AAAA,IAE/D,OAAO,IAAI;AAAA;AAAA,iBAEE,OAAO,IAAI;AAAA,eACb,OAAO,YAAY,CAAC;AACnC;AAEA,SAAS,cAAc,UAA0B;AAC7C,QAAM,QAAQ,SAAS,MAAM,wBAAwB;AACrD,MAAI,CAAC,OAAO;AACR,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,CAAC,EAAE,OAAO,IAAI,IAAI;AACxB,QAAM,WAAW,OAAO,WAAW,KAAK;AAExC,UAAQ,MAAM;AAAA,IACV,KAAK;AACD,aAAO,WAAW;AAAA,IACtB,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO,WAAW;AAAA,IACtB,KAAK;AACD,aAAO,WAAW,IAAI;AAAA,IAC1B,KAAK;AACD,aAAO,WAAW,KAAK;AAAA,IAC3B;AACI,aAAO;AAAA,EACf;AACJ;;;AClXO,IAAM,mBAAmB;AAAA,EAC5B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,KAAK;AAAA,EACL,MAAM;AAAA,EACN,KAAK;AACT;AAEO,IAAM,qBAAqB;AAAA,EAC9B,4BAA4B;AAAA,EAC5B,SAAS;AACb;AAEO,IAAM,eAAe;AAAA,EACxB,QAAQ;AAAA,EACR,YAAY;AAChB;AAIO,IAAM,uBAAuB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;AHCA,SAAS,gBAAgB,SAA4C;AACjE,UAAQ,IAAI,iCAAiC,OAAO;AAGpD,MAAI,OAAO,YAAY,YAAY,YAAY,MAAM;AACjD,WAAO;AAAA,EACX;AAGA,QAAM,aAAa;AAEnB,SACI,OAAO,WAAW,UAAU,aAC3B,WAAW,cAAc,aAAa,WAAW,cAAc,aAC1D,OAAO,WAAW,WAAW,YAAY,WAAW,SAAS,IAC7D,WAAW,cAAc,aAC9B,WAAW,cAAc,aACtB,WAAW,cAAc,cACzB,WAAW,cAAc;AAErC;AAEA,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCrB,OAAO,QAAQ,gBAAgB,EAC5B,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE,EAC5B,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYf,IAAO,iBAAQ;AAAA,EACX,MAAM;AAAA,EACN,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,aACI;AAAA,EACJ,UAAU,OAAO,SAAwB,aAAqB;AAC1D,UAAM,sBAAsB,OAAO;AACnC,WAAO;AAAA,EACX;AAAA,EACA,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAC,aAAY,IAAI,sCAAsC;AAGtD,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAGA,UAAM,iBAAiB,MAAM,eACxB,MAAM,IAAI,EACV;AAAA,MACG,CAAC,SAAS,KAAK,SAAS,YAAY,KAAK,KAAK,SAAS,QAAQ;AAAA,IACnE,EACC,MAAM,EAAE,EACR,KAAK,IAAI;AAGd,UAAM,gBAAgB,eAAe;AAAA,MACjC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AAGD,UAAM,UAAU,MAAM,yBAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAY,WAAW;AAAA,IAC3B,CAAC;AAGD,QAAI,CAAC,gBAAgB,OAAO,GAAG;AAC3B,MAAAA,aAAY,MAAM,8CAA8C;AAChE,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,OAAO,yBAAyB;AAAA,MAC/C,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAI;AACA,YAAM,SAAS,MAAM,sBAAsB,OAAO;AAClD,YAAM,UAAU,MAAM;AAAA,QAClB;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,MACX;AACA,MAAAA,aAAY,IAAI,WAAW,QAAQ,KAAK,aAAa,OAAO;AAE5D,UAAI,QAAQ,cAAc,SAAS;AAC/B,cAAM,4BACF,OAAO,QAAQ,eAAe,IAC9B,MAAM,OAAO,QAAQ,MAAM,OAAO;AACtC,cAAM,yBACF,OAAO,QAAQ,aAAa,IAC5B,MAAM,OAAO,QAAQ,MAAM,OAAO;AACtC,mBAAW;AAAA,UACP,MAAM,WAAW,QAAQ,MAAM,YAAY,CAAC,gBAAgB,OAAO,cAAc;AAAA,sBAAyB,0BAA0B,QAAQ,CAAC,CAAC,IAAI,QAAQ,MAAM,YAAY,CAAC;AAAA,mBAAsB,uBAAuB,QAAQ,CAAC,CAAC,IAAI,QAAQ,MAAM,YAAY,CAAC;AAAA,UACnQ,SAAS;AAAA,YACL,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB,eAAe;AAAA,YACf,OAAO,QAAQ;AAAA,YACf,eAAe,OAAO;AAAA,UAC1B;AAAA,QACJ,CAAC;AAAA,MACL,WAAW,QAAQ,cAAc,WAAW;AACxC,YAAI;AACA,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AACA,qBAAW;AAAA,YACP,MAAM,0BAA0B,QAAQ,MAAM,IAAI,QAAQ,MAAM,YAAY,CAAC,4BAA4B,OAAO,cAAc;AAAA,YAC9H,SAAS;AAAA,cACL,SAAS;AAAA,cACT,aAAa;AAAA,cACb,WAAW;AAAA,cACX,OAAO,QAAQ;AAAA,cACf,QAAQ,QAAQ;AAAA,cAChB,YAAY,MAAM;AAAA,gBACd;AAAA,gBACA,QAAQ;AAAA,gBACR,OAAO;AAAA,cACX;AAAA,cACA,eAAe,OAAO;AAAA,YAC1B;AAAA,UACJ,CAAC;AAAA,QACL,SAAS,OAAO;AACZ,UAAAA,aAAY,MAAM,6BAA6B,KAAK;AACpD,qBAAW;AAAA,YACP,MAAM,qBAAqB,QAAQ,MAAM,IAAI,QAAQ,MAAM,YAAY,CAAC,KAAK,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,YACrI,SAAS;AAAA,cACL,SAAS;AAAA,cACT,WAAW;AAAA,cACX,OAAO,QAAQ;AAAA,cACf,QAAQ,QAAQ;AAAA,cAChB,OACI,iBAAiB,QACX,MAAM,UACN;AAAA,YACd;AAAA,UACJ,CAAC;AACD,iBAAO;AAAA,QACX;AAAA,MACJ,WAAW,QAAQ,cAAc,YAAY;AACzC,YAAI;AACA,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AACA,qBAAW;AAAA,YACP,MAAM,yBAAyB,QAAQ,MAAM,IAAI,QAAQ,MAAM,YAAY,CAAC,4BAA4B,OAAO,cAAc;AAAA,YAC7H,SAAS;AAAA,cACL,SAAS;AAAA,cACT,aAAa;AAAA,cACb,WAAW;AAAA,cACX,OAAO,QAAQ;AAAA,cACf,QAAQ,QAAQ;AAAA,cAChB,YAAY,MAAM;AAAA,gBACd;AAAA,gBACA,QAAQ;AAAA,gBACR,OAAO;AAAA,cACX;AAAA,cACA,eAAe,OAAO;AAAA,YAC1B;AAAA,UACJ,CAAC;AAAA,QACL,SAAS,OAAO;AACZ,UAAAA,aAAY,MAAM,8BAA8B,KAAK;AACrD,qBAAW;AAAA,YACP,MAAM,sBAAsB,QAAQ,MAAM,IAAI,QAAQ,MAAM,YAAY,CAAC,KAAK,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,YACtI,SAAS;AAAA,cACL,SAAS;AAAA,cACT,WAAW;AAAA,cACX,OAAO,QAAQ;AAAA,cACf,QAAQ,QAAQ;AAAA,cAChB,OACI,iBAAiB,QACX,MAAM,UACN;AAAA,YACd;AAAA,UACJ,CAAC;AACD,iBAAO;AAAA,QACX;AAAA,MACJ,OAAO;AACH,cAAM,IAAI,MAAM,mBAAmB;AAAA,MACvC;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,4BAA4B,KAAK;AACnD,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,UACL,OACI,iBAAiB,QACX,MAAM,UACN;AAAA,QACd;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AIrZA;AAAA,EAOI,eAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,cAAAC;AAAA,EACA,4BAAAC;AAAA,OACG;;;ACJA,IAAM,uBAA2D;AAAA,EACpE,oBAAoB;AAAA,IAChB,aAAa;AAAA,IACb,QAAQ,CAAC,oBAAoC;AAAA,MACzC,MAAM;AAAA,MACN,OAAO,eAAe,MAChB,oCACA;AAAA,MACN,OAAO;AAAA,QACH;AAAA,UACI,eAAe;AAAA,UACf,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,QACD;AAAA,UACI,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,kBAAkB;AAAA,QACd,KAAK,eAAe,WAAW,OAAO;AAAA,QACtC,QAAQ,eAAe,WAAW,UAAU;AAAA,QAC5C,SAAS,eAAe,WAAW,WAAW;AAAA,QAC9C,GAAI,CAAC,eAAe,OAAO;AAAA,UACvB,KAAK;AAAA,YACD,OAAO,eAAe,WAAW,OAAO;AAAA,YACxC,OAAO,eAAe,WAAW,aAAa;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,UAAU,eAAe,YAAY;AAAA,MACrC,OAAO,eAAe,SAAS;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,aAAa;AAAA,IACb,QAAQ,CAAC,oBAAoC;AAAA,MACzC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH;AAAA,UACI,eAAe;AAAA,UACf,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,eAAe;AAAA,UACf,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,kBAAkB;AAAA,QACd,KAAK,eAAe,WAAW,OAAO;AAAA,QACtC,QAAQ,eAAe,WAAW,UAAU;AAAA,QAC5C,SAAS,eAAe,WAAW,WAAW;AAAA,QAC9C,GAAI,CAAC,eAAe,OAAO;AAAA,UACvB,KAAK;AAAA,YACD,OAAO,eAAe,WAAW,OAAO;AAAA,YACxC,OAAO,eAAe,WAAW,aAAa;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,UAAU,eAAe,YAAY;AAAA,MACrC,OAAO,eAAe,SAAS;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,kBAAkB;AAAA,IACd,aAAa;AAAA,IACb,QAAQ,CAAC,oBAAoC;AAAA,MACzC,MAAM;AAAA,MACN,OAAO,eAAe,MAChB,oCACA;AAAA,MACN,OAAO;AAAA,QACH;AAAA,UACI,eAAe;AAAA,UACf,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,QACD;AAAA,UACI,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,kBAAkB;AAAA,QACd,KAAK,eAAe,WAAW,OAAO;AAAA,QACtC,QAAQ,eAAe,WAAW,UAAU;AAAA,QAC5C,SAAS,eAAe,WAAW,WAAW;AAAA,QAC9C,GAAI,CAAC,eAAe,OAAO;AAAA,UACvB,KAAK;AAAA,YACD,OAAO,eAAe,WAAW,OAAO;AAAA,YACxC,OAAO,eAAe,WAAW,aAAa;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,UAAU,eAAe,YAAY;AAAA,MACrC,OAAO,eAAe,SAAS;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,iBAAiB;AAAA,IACb,aAAa;AAAA,IACb,QAAQ,CAAC,oBAAoC;AAAA,MACzC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH;AAAA,UACI,eAAe;AAAA,UACf,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,QACD;AAAA,UACI,MAAM;AAAA,UACN,OAAO,eAAe,UAAU,uBAAuB;AAAA,QAC3D;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,kBAAkB;AAAA,QACd,KAAK,eAAe,WAAW,OAAO;AAAA,QACtC,QAAQ,eAAe,WAAW,UAAU;AAAA,QAC5C,SAAS,eAAe,WAAW,WAAW;AAAA,QAC9C,GAAI,CAAC,eAAe,OAAO;AAAA,UACvB,KAAK;AAAA,YACD,OAAO,eAAe,WAAW,OAAO;AAAA,YACxC,OAAO,eAAe,WAAW,aAAa;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,UAAU,eAAe,YAAY;AAAA,MACrC,OAAO,eAAe,SAAS;AAAA,IACnC;AAAA,EACJ;AACJ;;;ADvHA,SAAS,oBAAoB,SAAgD;AACzE,EAAAC,aAAY,MAAM,qCAAqC,OAAO;AAG9D,MAAI,OAAO,YAAY,YAAY,YAAY,MAAM;AACjD,WAAO;AAAA,EACX;AAGA,QAAM,aAAa;AAGnB,MACI,OAAO,WAAW,cAAc,YAChC,CAAC,CAAC,UAAU,UAAU,OAAO,EAAE,SAAS,WAAW,SAAS,GAC9D;AACE,WAAO;AAAA,EACX;AAGA,UAAQ,WAAW,WAAW;AAAA,IAC1B,KAAK;AACD,aACI,OAAO,WAAW,aAAa,YAC/B,OAAO,WAAW,mBAAmB;AAAA,IAE7C,KAAK;AACD,aACI,OAAO,WAAW,YAAY,YAC9B,OAAO,WAAW,aAAa,YAC/B,OAAO,WAAW,mBAAmB;AAAA,IAE7C,KAAK;AACD,aAAO,OAAO,WAAW,YAAY;AAAA,IACzC;AACI,aAAO;AAAA,EACf;AACJ;AA8BA,IAAM,uBAAuB,OAAO,QAAQ,oBAAoB,EAC3D,IAAI,CAAC,CAAC,KAAK,QAAQ,MAAM,KAAK,GAAG,KAAK,SAAS,WAAW,EAAE,EAC5D,KAAK,IAAI;AAEd,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyDzB,oBAAoB;AAAA;AAAA;AAAA,EAGpB,qBAAqB,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe1D,IAAO,qBAAQ;AAAA,EACX,MAAM;AAAA,EACN,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,aACI;AAAA,EACJ,UAAU,OAAO,SAAwB,aAAqB;AAC1D,UAAM,sBAAsB,OAAO;AACnC,WAAO;AAAA,EACX;AAAA,EACA,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,0CAA0C;AAG1D,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAGA,UAAM,iBAAiB,MAAM,eACxB,MAAM,IAAI,EACV;AAAA,MACG,CAAC,SAAS,KAAK,SAAS,YAAY,KAAK,KAAK,SAAS,QAAQ;AAAA,IACnE,EACC,MAAM,EAAE,EACR,KAAK,IAAI;AAGd,UAAM,oBAAoBC,gBAAe;AAAA,MACrC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AAGD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAGD,QAAI,CAAC,oBAAoB,OAAO,GAAG;AAC/B,MAAAH,aAAY;AAAA,QACR;AAAA,MACJ;AACA,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,OAAO,6BAA6B;AAAA,MACnD,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAI;AACA,cAAQ,QAAQ,WAAW;AAAA,QACvB,KAAK,UAAU;AACX,cACI,CAAC,QAAQ,YACT,CAAC,qBAAqB,QAAQ,QAAQ,GACxC;AACE,kBAAM,IAAI;AAAA,cACN,yBAAyB,QAAQ,QAAQ,8BAA8B,OAAO,KAAK,oBAAoB,EAAE,KAAK,IAAI,CAAC;AAAA,YACvH;AAAA,UACJ;AAEA,gBAAM,gBAAgB,qBAClB,QAAQ,QACZ,EAAE,OAAO,QAAQ,cAAc;AAC/B,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA;AAAA,UACJ;AAEA,UAAAA,aAAY;AAAA,YACR;AAAA,YACA,OAAO,QAAQ,SAAS;AAAA,UAC5B;AAEA,gBAAM,oBAAoB,MAAM;AAAA,YAC5B;AAAA,YACA,OAAO,QAAQ,SAAS;AAAA,UAC5B;AACA,gBAAM,UAAU,OAAO;AAAA,YACnB,kBAAkB;AAAA,UACtB,EAAE,CAAC;AAGH,gBAAM,QACF,kBAAkB,gBAAgB,QAAQ,IAAI,KAAK,CAAC;AACxD,gBAAM,WAAW,MACZ;AAAA,YACG,CAAC,MACG,GAAG,EAAE,IAAI,IAAI,EAAE,YAAY,aAAa,EAAE,IAAI;AAAA,UACtD,EACC,KAAK,IAAI;AAEd,kBAAQ,IAAI,mBAAmB;AAAA,YAC3B,MAAM;AAAA,YAA4C,OAAO,QAAQ,SAAS,CAAC;AAAA,EAAK,WAAW,gBAAgB,QAAQ,KAAK,EAAE;AAAA,YAC1H,SAAS;AAAA,cACL,SAAS;AAAA,cACT,SAAS,OAAO,QAAQ,SAAS;AAAA,cACjC,SAAS;AAAA,cACT;AAAA,YACJ;AAAA,UACJ,CAAC;AAED,qBAAW;AAAA,YACP,MAAM;AAAA,YAA4C,OAAO,QAAQ,SAAS,CAAC;AAAA,EAAK,WAAW,gBAAgB,QAAQ,KAAK,EAAE;AAAA,YAC1H,SAAS;AAAA,cACL,SAAS;AAAA,cACT,SAAS,OAAO,QAAQ,SAAS;AAAA,cACjC,SAAS;AAAA,cACT;AAAA,YACJ;AAAA,UACJ,CAAC;AACD;AAAA,QACJ;AAAA,QACA,KAAK,UAAU;AACX,cACI,CAAC,QAAQ,WACT,CAAC,QAAQ,kBACT,CAAC,QAAQ,UACX;AACE,kBAAM,IAAI;AAAA,cACN;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,CAAC,qBAAqB,QAAQ,QAAQ,GAAG;AACzC,kBAAM,IAAI;AAAA,cACN,yBAAyB,QAAQ,QAAQ;AAAA,YAC7C;AAAA,UACJ;AAEA,gBAAM,gBAAgB,qBAClB,QAAQ,QACZ,EAAE,OAAO,QAAQ,cAAc;AAC/B,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA,QAAQ,QAAQ,SAAS;AAAA,YACzB;AAAA,UACJ;AACA,UAAAA,aAAY;AAAA,YACR;AAAA,YACA,OAAO,QAAQ,SAAS;AAAA,UAC5B;AAEA,gBAAM,aAAa,MAAM;AAAA,YACrB;AAAA,YACA,QAAQ,QAAQ,SAAS;AAAA,UAC7B;AACA,qBAAW;AAAA,YACP,MAAM,cAAc,QAAQ,QAAQ,SAAS,CAAC;AAAA,YAC9C,SAAS;AAAA,cACL,SAAS;AAAA,cACT,SAAS;AAAA,YACb;AAAA,UACJ,CAAC;AACD;AAAA,QACJ;AAAA,QACA,KAAK,SAAS;AACV,cAAI,CAAC,QAAQ,SAAS;AAClB,kBAAM,IAAI;AAAA,cACN;AAAA,YACJ;AAAA,UACJ;AACA,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA,QAAQ,QAAQ,SAAS;AAAA,UAC7B;AACA,UAAAA,aAAY;AAAA,YACR;AAAA,YACA,QAAQ,QAAQ,SAAS;AAAA,UAC7B;AAEA,qBAAW;AAAA,YACP,MAAM,cAAc,QAAQ,QAAQ,SAAS,CAAC;AAAA,YAC9C,SAAS;AAAA,cACL,SAAS;AAAA,cACT,aAAa;AAAA,YACjB;AAAA,UACJ,CAAC;AACD;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,cAAQ,IAAI,UAAU,KAAK;AAC3B,MAAAA,aAAY,MAAM,gCAAgC,MAAM,OAAO;AAC/D,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,UACL,OACI,iBAAiB,QACX,MAAM,UACN;AAAA,QACd;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA;AAAA,IAEN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,IAEA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,IAEA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AE5jBA;AAAA,EAKI,eAAAI;AAAA,OACG;AAGA,IAAM,iBAA2B;AAAA,EACpC,KAAK,OAAO,UAAyB,UAAkB,WAAmB;AACtE,IAAAC,aAAY,MAAM,qBAAqB;AACvC,UAAM,SAAS,OAAO,QAAQ,gBAAgB,EACzC,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,GAAG,KAAK,KAAK,EAAE,EACxC,KAAK,IAAI;AACd,WAAO;AAAA,EAAqD,MAAM;AAAA,EACtE;AACJ;;;ACjBA;AAAA,EAKI,eAAAC;AAAA,OACG;AAGA,IAAM,qBAA+B;AAAA,EACxC,KAAK,OAAO,UAAyB,UAAkB,WAAmB;AACtE,IAAAC,aAAY,MAAM,yBAAyB;AAC3C,UAAM,UAAU,OAAO,QAAQ,kBAAkB,EAC5C,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,GAAG,KAAK,KAAK,EAAE,EACxC,KAAK,IAAI;AACd,WAAO;AAAA,EAA+C,OAAO;AAAA,EACjE;AACJ;;;ACNO,IAAM,SAAS;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACJ;AAEO,IAAM,gBAAwB;AAAA,EACjC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,gBAAQ,kBAAU;AAAA,EAC5B,YAAY,CAAC;AAAA,EACb,WAAW,CAAC,gBAAgB,kBAAkB;AAClD;AAEA,IAAO,gBAAQ;","names":["elizaLogger","elizaLogger","elizaLogger","composeContext","ModelClass","generateObjectDeprecated","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","elizaLogger","elizaLogger","elizaLogger"]}